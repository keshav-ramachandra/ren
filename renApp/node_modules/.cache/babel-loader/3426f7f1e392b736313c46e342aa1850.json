{"ast":null,"code":"var _jsxFileName = \"/home/kesha/Downloads/ren-main/renApp/src/App.js\";\nimport React from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport ABI from \"./ABI.json\"; // Replace with your contract's address.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x3Aa969d343BD6AE66c4027Bb61A382DC96e88150\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      let web3Provider; // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n      // Modern dApp browsers.\n\n      if (window.ethereum) {\n        web3Provider = window.ethereum;\n\n        try {\n          // Request account access.\n          await window.ethereum.enable();\n        } catch (error) {\n          // User denied account access.\n          this.logError(\"Please allow access to your Web3 wallet.\");\n          return;\n        }\n      } else if (window.web3) {\n        // Legacy dApp browsers.\n        web3Provider = window.web3.currentProvider;\n      } // If no injected web3 instance is detected, fall back to Ganache.\n      else {\n        this.logError(\"Please install MetaMask!\");\n        return;\n      }\n\n      const web3 = new Web3(web3Provider);\n      const networkID = await web3.eth.net.getId();\n\n      if (networkID !== 42) {\n        this.logError(\"Please set your network to Kovan.\");\n        return;\n      }\n\n      this.setState({\n        web3\n      }, () => {\n        // Update balances immediately and every 10 seconds.\n        this.updateBalance();\n        setInterval(() => {\n          this.updateBalance();\n        }, 10 * 1000);\n      });\n    };\n\n    this.render = () => {\n      const {\n        balance,\n        message,\n        error\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balance: \", balance, \" RenBTC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.deposit().catch(this.logError),\n            children: \"Deposit 0.0005 BTC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.withdraw().catch(this.logError),\n            children: [\"Withdraw \", balance, \" RenBTC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this), message.split(\"\\n\").map(line => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: line\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 18\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.updateBalance = async () => {\n      const {\n        web3\n      } = this.state;\n      const contract = new web3.eth.Contract(ABI, contractAddress);\n      const balance = await contract.methods.balance().call();\n      this.setState({\n        balance: parseInt(balance.toString()) / 10 ** 8\n      });\n    };\n\n    this.logError = error => {\n      console.error(error);\n      this.setState({\n        error: String((error || {}).message || error)\n      });\n    };\n\n    this.log = message => {\n      this.setState({\n        message\n      });\n    };\n\n    this.deposit = async () => {\n      this.logError(\"\"); // Reset error.\n      // TODO\n    };\n\n    this.withdraw = async () => {\n      this.logError(\"\"); // Reset error.\n      // TODO\n    };\n\n    this.state = {\n      balance: 0,\n      message: \"\",\n      error: \"\"\n    };\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kesha/Downloads/ren-main/renApp/src/App.js"],"names":["React","Web3","ABI","contractAddress","App","Component","constructor","props","componentDidMount","web3Provider","window","ethereum","enable","error","logError","web3","currentProvider","networkID","eth","net","getId","setState","updateBalance","setInterval","render","balance","message","state","deposit","catch","withdraw","split","map","line","color","contract","Contract","methods","call","parseInt","toString","console","String","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\n\nimport ABI from \"./ABI.json\";\n\n// Replace with your contract's address.\nconst contractAddress = \"0x3Aa969d343BD6AE66c4027Bb61A382DC96e88150\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 0,\n      message: \"\",\n      error: \"\",\n    };\n  }\n\n  componentDidMount = async () => {\n    let web3Provider;\n\n    // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n    // Modern dApp browsers.\n    if (window.ethereum) {\n      web3Provider = window.ethereum;\n      try {\n        // Request account access.\n        await window.ethereum.enable();\n      } catch (error) {\n        // User denied account access.\n        this.logError(\"Please allow access to your Web3 wallet.\");\n        return;\n      }\n    } else if (window.web3) {\n      // Legacy dApp browsers.\n      web3Provider = window.web3.currentProvider;\n    }\n    // If no injected web3 instance is detected, fall back to Ganache.\n    else {\n      this.logError(\"Please install MetaMask!\");\n      return;\n    }\n\n    const web3 = new Web3(web3Provider);\n\n    const networkID = await web3.eth.net.getId();\n    if (networkID !== 42) {\n      this.logError(\"Please set your network to Kovan.\");\n      return;\n    }\n\n    this.setState({ web3 }, () => {\n      // Update balances immediately and every 10 seconds.\n      this.updateBalance();\n      setInterval(() => {\n        this.updateBalance();\n      }, 10 * 1000);\n    });\n  };\n\n  render = () => {\n    const { balance, message, error } = this.state;\n    return (\n      <div className=\"App\">\n        <p>Balance: {balance} RenBTC</p>\n        <p>\n          <button onClick={() => this.deposit().catch(this.logError)}>\n            Deposit 0.0005 BTC\n          </button>\n        </p>\n        <p>\n          <button onClick={() => this.withdraw().catch(this.logError)}>\n            Withdraw {balance} RenBTC\n          </button>\n        </p>\n        {message.split(\"\\n\").map((line) => (\n          <p>{line}</p>\n        ))}\n        {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n      </div>\n    );\n  };\n\n  updateBalance = async () => {\n    const { web3 } = this.state;\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n    const balance = await contract.methods.balance().call();\n    this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n  };\n\n  logError = (error) => {\n    console.error(error);\n    this.setState({ error: String((error || {}).message || error) });\n  };\n\n  log = (message) => {\n    this.setState({ message });\n  };\n\n  deposit = async () => {\n    this.logError(\"\"); // Reset error.\n    // TODO\n  };\n\n  withdraw = async () => {\n    this.logError(\"\"); // Reset error.\n    // TODO\n  };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}